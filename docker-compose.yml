version: "2.1"

services:
  user-db:
    image: postgres:latest
    container_name: user-db
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=tracked
      - POSTGRES_PASSWORD=eecs4314
      - POSTGRES_DB=user_db
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tracked -d user_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./tracked-frontend
      dockerfile: Dockerfile
    container_name: tracked-frontend
    ports:
      - "80:80"
    networks:
      - microservices-network
    depends_on:
      - user-service
      - task-service
      - project-service
      - notification-service

  task-db:
    image: postgres:latest
    container_name: task-db
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=tracked
      - POSTGRES_PASSWORD=eecs4314
      - POSTGRES_DB=task_db
    volumes:
      - task-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tracked -d task_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  project-db:
    image: postgres:latest
    container_name: project-db
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=tracked
      - POSTGRES_PASSWORD=eecs4314
      - POSTGRES_DB=project_db
    volumes:
      - project-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tracked -d project_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    build:
      context: ./services
      dockerfile: UserService/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - user-data:/app/data
      - ./services/uploads:/app/uploads
    networks:
      - microservices-network
    depends_on:
      user-db:
        condition: service_healthy

  task-service:
    build:
      context: ./services
      dockerfile: TaskService/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - task-data:/app/data
    networks:
      - microservices-network
    depends_on:
      task-db:
        condition: service_healthy

  project-service:
    build:
      context: ./services
      dockerfile: ProjectService/Dockerfile
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - project-data:/app/data
    networks:
      - microservices-network
    depends_on:
      project-db:
        condition: service_healthy

  notification-service:
    build:
      context: ./services/NotificationService
      dockerfile: Dockerfile
    container_name: notification-service-container
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=kafka:29092
    restart: on-failure
    networks:
      - microservices-network

  zookeeper:
    image: bitnami/zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    networks:
      - microservices-network

  kafka:
    image: bitnami/kafka:3.4.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ENABLE_KRAFT=no
      - ALLOW_ANONYMOUS_LOGIN=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=1
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_LOG_RETENTION_MS=-1
      - KAFKA_CFG_LOG_RETENTION_BYTES=-1
      - KAFKA_CFG_LOG_CLEANUP_POLICY=compact
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - microservices-network
    depends_on:
      - zookeeper

networks:
  microservices-network:
    name: microservices-network
    driver: bridge

volumes:
  user-data:
  task-data:
  project-data:
  user-db-data:
  task-db-data:
  project-db-data:
  zookeeper-data:
  kafka-data:
